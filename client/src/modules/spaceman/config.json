{
  "solidityStages": [
    {
      "title": "Deployment",
      "testCases": "const AstronautContract = artifacts.require('AstronautContract');\ncontract('AstronautContract', function(accounts) {\n  let contract;\n  let _astronaut = accounts[0];\n  let _arbiter = accounts[1];\n  let _shipper = accounts[2];\n  before(async () => {\n      contract = await AstronautContract.new(_arbiter, _shipper, {\n         from: _astronaut,\n         gasPrice: 0,\n      });\n  });\n  it('should set an arbiter', async function() {\n      let arbiter = await contract.arbiter.call();\n      assert.deepEqual(arbiter, _arbiter);\n  });\n  it('should set an astronaut', async function() {\n      let astronaut = await contract.astronaut.call();\n      assert.deepEqual(astronaut, _astronaut);\n  });\n  it('should set an shipper', async function() {\n      let shipper = await contract.shipper.call();\n      assert.deepEqual(shipper, _shipper);\n  });\n});",
      "referenceSolution": "pragma solidity ^0.4.13;\n\ncontract AstronautContract {\n  address public astronaut;\n  address public shipper;\n  address public arbiter;\n\n  function AstronautContract(address _arbiter, address _shipper) public   {\n    arbiter = _arbiter;\n    shipper = _shipper;\n    astronaut = msg.sender;\n  }\n}\n",
      "instructions": "# Welcome\n\nWelcome to Blockstreet, astronaut! \n\nWe happened to notice your flux capacitor burnt out on the last mission\nand now you're stuck on Mars. Bummer.\n\nFortunately for you, Alien Autoparts has just the part you need, but they \nneed to ship it a long way and they don't trust you... at all. \nWhen we asked, they said this:\n\n```\nWe don't trust him at all.\n```\n\n## Smart Contracts to the Rescue!\n\nFortunately writing smart contracts on Ethereum allows for full \ntransparency and Alien Autoparts has agreed to ship a part for you if\nyou write up a contract they would agree to.\n\nFirst step to accomplish this we'll need to:\n\n* Declare a Solidity Pragma\n* Write a Contract \n* Write a Contract Constructor\n* Store 3 member variables\n\nEach of these steps will be described below, for information on syntax\nrefer to the [Solidity Documentation](http://solidity.readthedocs.io/en/develop/index.html)\n\n### Solidity Pragma\n\nA Solidity Pragma tells the compiler what version of Solidity you want \nto compile your code against. Hopefully this will keep from introducing\nbreaking changes on future versions of Solidity when other astronauts\nneed to use your code! For this module we'll use `solidity ^0.4.13`. \n\n### Write a Contract\n\nDon't worry, not a full contract! Just a blank one for now ;)\n\nDeclare a blank contract called `AstronautContract`.\n\n### Contract Constructor\n\nAdd a construct function inside of this contract. Constructors will share\nthe name with its contract, so call it `AstronautContract`.\n\n### Member Variables\n\nDeclare three member variables:\n\n* A `public` address `arbiter` (the trusted third party)\n* A `public` address `shipper` (alien autoparts)\n* A `public` address `astronaut` (that's you!)\n\nThe constructor should be passed both `arbiter` and `shipper` addresses \n(in that order) and set all three member variables. \n\n*Hint:* The `astronaut` address won't need to be passed in, it will be\navailable in the smart contract because you are the sender. \n\n\n\n"
    },
    {
      "title": "Funding",
      "testCases": "const AstronautContract = artifacts.require('AstronautContract');\ncontract('AstronautContract', function(accounts) {\n  let contract;\n  let _astronaut = accounts[0];\n  let _arbiter = accounts[1];\n  let _shipper = accounts[2];\n  before(async () => {\n      contract = await AstronautContract.new(_arbiter, _shipper, {\n         from: _astronaut,\n         gasPrice: 0,\n      });\n  });\n  describe('Fund Stage tests', function() {\n    it('should be able to send ether', async () => {\n      let ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n      await contract.pay({ value: ether, from: _astronaut });\n      let balance = await web3.eth.getBalance(contract.address);\n      assert.equal(balance.toString(), ether);\n    })\n    it('should error if its the shipper', async () => {\n      let ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n      const promise = contract.pay({ value: ether, from: _shipper });\n      await expectThrow(promise);\n    })\n    it('should log that it was paid', async () => {\n      let ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n      let tx = await contract.pay({ value: ether, from: _astronaut });\n      console.log(findEvent(tx, 'Paid'))\n      assert(findEvent(tx, 'Paid'));\n    })\n  })\n  describe('Constructor Stage tests', function() {\n    it('should set an arbiter', async function() {\n        let arbiter = await contract.arbiter.call();\n        assert.deepEqual(arbiter, _arbiter);\n    });\n    it('should set an astronaut', async function() {\n        let astronaut = await contract.astronaut.call();\n        assert.deepEqual(astronaut, _astronaut);\n    });\n    it('should set an shipper', async function() {\n        let shipper = await contract.shipper.call();\n        assert.deepEqual(shipper, _shipper);\n    });\n  })\n});\n\nasync function expectThrow(promise) {\n  const errMsg = 'Expected throw not received';\n  try {\n    await promise;\n  } catch (err) {\n    assert(err.toString().includes('invalid opcode'), errMsg);\n    return;\n  }\n  assert.fail(errMsg);\n}\n\nfunction findEvent(transaction, evt) {\n  let event = transaction.logs.filter(({ event }) => event === evt)[0];\n  if(!event) throw `Remember to call ${evt} event!`;\n  return event.args;\n}",
      "referenceSolution": "pragma solidity ^0.4.13;\n\ncontract AstronautContract {\n  address public astronaut;\n  address public shipper;\n  address public arbiter;\n\n  event Paid(uint256 value);\n\n  function AstronautContract(address _arbiter, address _shipper) public {\n    arbiter = _arbiter;\n    shipper = _shipper;\n    astronaut = msg.sender;\n  }\n\n  function pay() public payable {\n    require(msg.sender == astronaut);\n    Paid(msg.value);\n  }\n}\n"
    },
    {
      "title": "Approval",
      "testCases": "const AstronautContract = artifacts.require('AstronautContract');\ncontract('AstronautContract', function(accounts) {\n  let contract;\n  let _astronaut = accounts[0];\n  let _arbiter = accounts[1];\n  let _shipper = accounts[2];\n  beforeEach(async () => {\n      contract = await AstronautContract.new(_arbiter, _shipper, {\n         from: _astronaut,\n         gasPrice: 0,\n      });\n  });\n  describe('Receive Stage tests', function() {\n    describe ('after paying', function() {\n      beforeEach(async () => {\n        let ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n        await contract.pay({ value: ether, from: _astronaut });\n      })\n      it('should error if its the shipper', async () => {\n        const promise = contract.receive({ from: _shipper });\n        await expectThrow(promise);\n      })\n      it('should error if its the astronaut', async () => {\n        let ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n        const promise = contract.receive({ from: _astronaut });\n        await expectThrow(promise);\n      })\n      it('should log that it was received', async () => {\n        let ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n        let tx = await contract.receive({ from: _arbiter });\n        assert(findEvent(tx, 'Received'));\n      })\n    })\n  })\n  describe('Fund Stage tests', function() {\n    it('should be able to send ether', async () => {\n      let ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n      await contract.pay({ value: ether, from: _astronaut });\n      let balance = await web3.eth.getBalance(contract.address);\n      assert.equal(balance.toString(), ether);\n    })\n    it('should error if its the shipper', async () => {\n      let ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n      const promise = contract.pay({ value: ether, from: _shipper });\n      await expectThrow(promise);\n    })\n    it('should log that it was paid', async () => {\n      let ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n      let tx = await contract.pay({ value: ether, from: _astronaut });\n      assert(findEvent(tx, 'Paid'));\n    })\n  })\n  describe('Constructor Stage tests', function() {\n    it('should set an arbiter', async function() {\n        let arbiter = await contract.arbiter.call();\n        assert.deepEqual(arbiter, _arbiter);\n    });\n    it('should set an astronaut', async function() {\n        let astronaut = await contract.astronaut.call();\n        assert.deepEqual(astronaut, _astronaut);\n    });\n    it('should set an shipper', async function() {\n        let shipper = await contract.shipper.call();\n        assert.deepEqual(shipper, _shipper);\n    });\n  })\n});\n\nasync function expectThrow(promise) {\n  const errMsg = 'Expected throw not received';\n  try {\n    await promise;\n  } catch (err) {\n    assert(err.toString().includes('invalid opcode'), errMsg);\n    return;\n  }\n  assert.fail(errMsg);\n}\n\nfunction findEvent(transaction, evt) {\n  let event = transaction.logs.filter(({ event }) => event === evt)[0];\n  if(!event) throw `Remember to call ${evt} event!`;\n  return event.args;\n}",
      "referenceSolution": "pragma solidity ^0.4.13;\n\ncontract AstronautContract {\n  address public astronaut;\n  address public shipper;\n  address public arbiter;\n\n  enum State {\n    DEPLOYED,\n    PAID,\n    RECEIVED\n  }\n  State public state;\n\n  event Paid(uint256 value);\n  event Received(uint256 time);\n\n  function AstronautContract(address _arbiter, address _shipper) public {\n    arbiter = _arbiter;\n    shipper = _shipper;\n    astronaut = msg.sender;\n  }\n\n  function pay() public payable {\n    require(msg.sender == astronaut);\n    state = State.PAID;\n    Paid(msg.value);\n  }\n\n  function receive() public {\n    require(msg.sender == arbiter);\n    require(state == State.PAID);\n    state = State.RECEIVED;\n    Received(now);\n  }\n}\n"
    },
    {
      "title": "Withdrawal",
      "testCases": "const AstronautContract = artifacts.require('AstronautContract');\ncontract('AstronautContract', function(accounts) {\n  let contract;\n  let _astronaut = accounts[0];\n  let _arbiter = accounts[1];\n  let _shipper = accounts[2];\n  beforeEach(async () => {\n      contract = await AstronautContract.new(_arbiter, _shipper, {\n         from: _astronaut,\n         gasPrice: 0,\n      });\n  });\n  describe('Withdraw Stage tests', function() {\n    describe ('after paying and receiving', function() {\n      let ether;\n      beforeEach(async () => {\n        ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n        await contract.pay({ value: ether, from: _astronaut });\n        await contract.receive({ from: _arbiter });\n      })\n      it('should withraw as the shipper', async () => {\n        let beforeBalance = await web3.eth.getBalance(_shipper);\n        await contract.withdraw({ from: _shipper, gasPrice: 0 });\n        let afterBalance = await web3.eth.getBalance(_shipper);\n        let diff = afterBalance.minus(beforeBalance)\n        assert.equal(diff.toString(), ether.toString());\n      })\n      it('should error if its the astronaut', async () => {\n        const promise = contract.receive({ from: _astronaut });\n        await expectThrow(promise);\n      })\n      it('should log that it was withdrawn', async () => {\n        let tx = await contract.withdraw({ from: _shipper });\n        let log = findEvent(tx, 'Withdraw');\n        assert(log, 'Be sure to log the withdraw event!');\n        let value = log.value;\n        assert.equal(value.toString(), ether.toString());\n      })\n    })\n  })\n  describe('Receive Stage tests', function() {\n    describe ('after paying', function() {\n      beforeEach(async () => {\n        let ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n        await contract.pay({ value: ether, from: _astronaut });\n      })\n      it('should error if its the shipper', async () => {\n        const promise = contract.receive({ from: _shipper });\n        await expectThrow(promise);\n      })\n      it('should error if its the astronaut', async () => {\n        let ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n        const promise = contract.receive({ from: _astronaut });\n        await expectThrow(promise);\n      })\n      it('should log that it was received', async () => {\n        let ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n        let tx = await contract.receive({ from: _arbiter });\n        assert(findEvent(tx, 'Received'));\n      })\n    })\n  })\n  describe('Fund Stage tests', function() {\n    it('should be able to send ether', async () => {\n      let ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n      await contract.pay({ value: ether, from: _astronaut });\n      let balance = await web3.eth.getBalance(contract.address);\n      assert.equal(balance.toString(), ether);\n    })\n    it('should error if its the shipper', async () => {\n      let ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n      const promise = contract.pay({ value: ether, from: _shipper });\n      await expectThrow(promise);\n    })\n    it('should log that it was paid', async () => {\n      let ether = web3.toBigNumber(web3.toWei('.1', 'Ether'));\n      let tx = await contract.pay({ value: ether, from: _astronaut });\n      assert(findEvent(tx, 'Paid'));\n    })\n  })\n  describe('Constructor Stage tests', function() {\n    it('should set an arbiter', async function() {\n        let arbiter = await contract.arbiter.call();\n        assert.deepEqual(arbiter, _arbiter);\n    });\n    it('should set an astronaut', async function() {\n        let astronaut = await contract.astronaut.call();\n        assert.deepEqual(astronaut, _astronaut);\n    });\n    it('should set an shipper', async function() {\n        let shipper = await contract.shipper.call();\n        assert.deepEqual(shipper, _shipper);\n    });\n  })\n});\n\nasync function expectThrow(promise) {\n  const errMsg = 'Expected throw not received';\n  try {\n    await promise;\n  } catch (err) {\n    assert(err.toString().includes('invalid opcode'), errMsg);\n    return;\n  }\n  assert.fail(errMsg);\n}\n\nfunction findEvent(transaction, evt) {\n  let event = transaction.logs.filter(({ event }) => event === evt)[0];\n  if(!event) throw `Remember to call ${evt} event!`;\n  return event.args;\n}",
      "referenceSolution": "pragma solidity ^0.4.13;\n\ncontract AstronautContract {\n  address public astronaut;\n  address public shipper;\n  address public arbiter;\n\n  enum State {\n    DEPLOYED,\n    PAID,\n    RECEIVED,\n    WITHDRAWN\n  }\n  State public state;\n\n  event Paid(uint256 value);\n  event Received(uint256 time);\n  event Withdraw(uint256 value);\n\n  function AstronautContract(address _arbiter, address _shipper) public {\n    arbiter = _arbiter;\n    shipper = _shipper;\n    astronaut = msg.sender;\n  }\n\n  function pay() public payable {\n    require(msg.sender == astronaut);\n    state = State.PAID;\n    Paid(msg.value);\n  }\n\n  function receive() public {\n    require(msg.sender == arbiter);\n    require(state == State.PAID);\n    state = State.RECEIVED;\n    Received(now);\n  }\n\n  function withdraw() public {\n    require(msg.sender == shipper);\n    require(state == State.RECEIVED);\n    state = State.WITHDRAWN;\n    Withdraw(this.balance);\n    shipper.transfer(this.balance);\n  }\n}\n"
    }
  ],
  "deploymentStage": {
    "title": "JS Deploy",
    "preloaded": "let json = `{'abi':[{'constant':false,'inputs':[],'name':'pay','outputs':[],'payable':true,'stateMutability':'payable','type':'function'},{'constant':true,'inputs':[],'name':'astronaut','outputs':[{'name':'','type':'address'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':false,'inputs':[],'name':'withdraw','outputs':[],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':false,'inputs':[],'name':'receive','outputs':[],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':true,'inputs':[],'name':'shipper','outputs':[{'name':'','type':'address'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':true,'inputs':[],'name':'state','outputs':[{'name':'','type':'uint8'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':true,'inputs':[],'name':'arbiter','outputs':[{'name':'','type':'address'}],'payable':false,'stateMutability':'view','type':'function'},{'inputs':[{'name':'_arbiter','type':'address'},{'name':'_shipper','type':'address'}],'payable':false,'stateMutability':'nonpayable','type':'constructor'},{'anonymous':false,'inputs':[{'indexed':false,'name':'value','type':'uint256'}],'name':'Paid','type':'event'},{'anonymous':false,'inputs':[{'indexed':false,'name':'time','type':'uint256'}],'name':'Received','type':'event'},{'anonymous':false,'inputs':[{'indexed':false,'name':'value','type':'uint256'}],'name':'Withdraw','type':'event'}],'bytecode':'0x6060604052341561000f57600080fd5b6040516040806106ca8339810160405280805190602001909190805190602001909190505081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506105c3806101076000396000f300606060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631b9265b8146100885780633901f16b146100925780633ccfd60b146100e7578063a3e76c0f146100fc578063c18ed1a114610111578063c19d93fb14610166578063fe25e00a1461019d575b600080fd5b6100906101f2565b005b341561009d57600080fd5b6100a56102aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100f257600080fd5b6100fa6102cf565b005b341561010757600080fd5b61010f61044c565b005b341561011c57600080fd5b610124610538565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561017157600080fd5b61017961055e565b6040518082600381111561018957fe5b60ff16815260200191505060405180910390f35b34156101a857600080fd5b6101b0610571565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561024d57600080fd5b6001600260146101000a81548160ff0219169083600381111561026c57fe5b02179055507f581d416ae9dff30c9305c2b35cb09ed5991897ab97804db29ccf92678e953160346040518082815260200191505060405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561032b57600080fd5b6002600381111561033857fe5b600260149054906101000a900460ff16600381111561035357fe5b14151561035f57600080fd5b6003600260146101000a81548160ff0219169083600381111561037e57fe5b02179055507f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d3073ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561044a57600080fd5b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104a857600080fd5b600160038111156104b557fe5b600260149054906101000a900460ff1660038111156104d057fe5b1415156104dc57600080fd5b60028060146101000a81548160ff021916908360038111156104fa57fe5b02179055507fa8142743f8f70a4c26f3691cf4ed59718381fb2f18070ec52be1f1022d855557426040518082815260200191505060405180910390a1565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260149054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a7230582043fcfc08016c73ad78a0c21dc8a2096f61c3f66b06178a43945d5bdbe0eeb9f80029'}`\n\nrequire('fs').writeFileSync('AstronautContract.json', json);\n\n\nconst Web3 = require('web3');\nconst web3 = new Web3();\nlet _testAccounts;\nlet publicEtherAccount;\n(() => {\n  const TestRPC = require('ethereumjs-testrpc');\n  const accounts = [].concat([{ \n    balance: '10000000000000000000', // 10 ether\n    secretKey: web3.utils.randomHex(32)\n  }, {\n    balance: '10000000000000000000', // 10 ether\n    secretKey: web3.utils.randomHex(32),\n  }, {\n    balance: '10000000000000000000', // 10 ether\n    secretKey: web3.utils.randomHex(32),\n  }])\n  const provider = TestRPC.provider({ accounts });\n  _testAccounts = accounts.map(({ secretKey }) => web3.eth.accounts.privateKeyToAccount(secretKey));\n  // temporary monkeypatch fix until versioning issues are fixed\n  // https://github.com/ethereum/web3.js/issues/1038\n  provider.constructor.prototype.send = provider.constructor.prototype.sendAsync\n  web3.setProvider(provider);\n})();",
    "testCases": "let assert = require('chai').assert;\nconst [arbiter, shipper, astronaut] = _testAccounts;\ndescribe('deploy contract', () => {\n it('should return a promise', () => {\n        assert(deploy(arbiter.address, shipper.address, astronaut.address).then);\n        assert(deploy(arbiter.address, shipper.address, astronaut.address).catch);\n });\n it('should deploy to address', async () => {\n        await deploy(arbiter.address, shipper.address, astronaut.address).then((contract) => {\n          assert(contract.options.address)\n        })\n });\n});",
    "referenceSolution": "const { bytecode, abi } = require('./AstronautContract.json');\n\nconst AstronautContract = new web3.eth.Contract(abi);\n\nfunction deploy(arbiterAddress, shipperAddress, astronautAddress) {\n  return AstronautContract.deploy({ \n      arguments: [arbiterAddress, shipperAddress],\n      data: bytecode\n    }).estimateGas().then((gas) => {\n      return AstronautContract.deploy({\n        arguments: [arbiterAddress, shipperAddress],\n        data: bytecode\n      }).send({ \n        from: astronautAddress,\n        gasPrice: 0,\n        gas,\n      });  \n  })\n}\n"
  },
  "apiStage": {
    "title": "JS API",
    "preloaded": "let json = `{'abi':[{'constant':false,'inputs':[],'name':'pay','outputs':[],'payable':true,'stateMutability':'payable','type':'function'},{'constant':true,'inputs':[],'name':'astronaut','outputs':[{'name':'','type':'address'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':false,'inputs':[],'name':'withdraw','outputs':[],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':false,'inputs':[],'name':'receive','outputs':[],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':true,'inputs':[],'name':'shipper','outputs':[{'name':'','type':'address'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':true,'inputs':[],'name':'state','outputs':[{'name':'','type':'uint8'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':true,'inputs':[],'name':'arbiter','outputs':[{'name':'','type':'address'}],'payable':false,'stateMutability':'view','type':'function'},{'inputs':[{'name':'_arbiter','type':'address'},{'name':'_shipper','type':'address'}],'payable':false,'stateMutability':'nonpayable','type':'constructor'},{'anonymous':false,'inputs':[{'indexed':false,'name':'value','type':'uint256'}],'name':'Paid','type':'event'},{'anonymous':false,'inputs':[{'indexed':false,'name':'time','type':'uint256'}],'name':'Received','type':'event'},{'anonymous':false,'inputs':[{'indexed':false,'name':'value','type':'uint256'}],'name':'Withdraw','type':'event'}],'bytecode':'0x6060604052341561000f57600080fd5b6040516040806106ca8339810160405280805190602001909190805190602001909190505081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506105c3806101076000396000f300606060405260043610610083576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631b9265b8146100885780633901f16b146100925780633ccfd60b146100e7578063a3e76c0f146100fc578063c18ed1a114610111578063c19d93fb14610166578063fe25e00a1461019d575b600080fd5b6100906101f2565b005b341561009d57600080fd5b6100a56102aa565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100f257600080fd5b6100fa6102cf565b005b341561010757600080fd5b61010f61044c565b005b341561011c57600080fd5b610124610538565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561017157600080fd5b61017961055e565b6040518082600381111561018957fe5b60ff16815260200191505060405180910390f35b34156101a857600080fd5b6101b0610571565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561024d57600080fd5b6001600260146101000a81548160ff0219169083600381111561026c57fe5b02179055507f581d416ae9dff30c9305c2b35cb09ed5991897ab97804db29ccf92678e953160346040518082815260200191505060405180910390a1565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561032b57600080fd5b6002600381111561033857fe5b600260149054906101000a900460ff16600381111561035357fe5b14151561035f57600080fd5b6003600260146101000a81548160ff0219169083600381111561037e57fe5b02179055507f5b6b431d4476a211bb7d41c20d1aab9ae2321deee0d20be3d9fc9b1093fa6e3d3073ffffffffffffffffffffffffffffffffffffffff16316040518082815260200191505060405180910390a1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561044a57600080fd5b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156104a857600080fd5b600160038111156104b557fe5b600260149054906101000a900460ff1660038111156104d057fe5b1415156104dc57600080fd5b60028060146101000a81548160ff021916908360038111156104fa57fe5b02179055507fa8142743f8f70a4c26f3691cf4ed59718381fb2f18070ec52be1f1022d855557426040518082815260200191505060405180910390a1565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260149054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a7230582043fcfc08016c73ad78a0c21dc8a2096f61c3f66b06178a43945d5bdbe0eeb9f80029'}`\n\nrequire('fs').writeFileSync('AstronautContract.json', json);\n\n\nconst Web3 = require('web3');\nconst web3 = new Web3();\nlet _testAccounts;\nlet publicEtherAccount;\n(() => {\n  const TestRPC = require('ethereumjs-testrpc');\n  const accounts = [].concat([{ \n    balance: '10000000000000000000', // 10 ether\n    secretKey: web3.utils.randomHex(32)\n  }, {\n    balance: '10000000000000000000', // 10 ether\n    secretKey: web3.utils.randomHex(32),\n  }, {\n    balance: '10000000000000000000', // 10 ether\n    secretKey: web3.utils.randomHex(32),\n  }])\n  const provider = TestRPC.provider({ accounts });\n  _testAccounts = accounts.map(({ secretKey }) => web3.eth.accounts.privateKeyToAccount(secretKey));\n  // temporary monkeypatch fix until versioning issues are fixed\n  // https://github.com/ethereum/web3.js/issues/1038\n  provider.constructor.prototype.send = provider.constructor.prototype.sendAsync\n  web3.setProvider(provider);\n})();\n\nlet __contract = JSON.parse(json);\nlet __bytecode = __contract.bytecode;\nlet __abi = __contract.abi;\n\nconst __AstronautContract = new web3.eth.Contract(__abi);\n\nfunction deploy(arbiterAddress, shipperAddress, astronautAddress) {\n  return __AstronautContract.deploy({ \n      arguments: [arbiterAddress, shipperAddress],\n      data: __bytecode\n    }).estimateGas().then((gas) => {\n      return __AstronautContract.deploy({\n        arguments: [arbiterAddress, shipperAddress],\n        data: __bytecode\n      }).send({ \n        from: astronautAddress,\n        gasPrice: 0,\n        gas,\n      });  \n  })\n}",
    "testCases": "let assert = require('chai').assert;\nconst [arbiter, shipper, astronaut] = _testAccounts;\ndescribe('deploy contract', () => {\n    let api;\n    let address;\n    let contract;\n    let fund = new web3.utils.BN('1');\n    before(async () => {\n      contract = await deploy(arbiter.address, shipper.address, astronaut.address);\n      address = contract.options.address;\n      api = new AstronautAPI(address);\n    })\n it('should allow the astronaut to pay', async () => {\n       await api.pay(astronaut.address, fund);\n       let balance = await web3.eth.getBalance(address);\n       assert.equal(fund.toString(), balance);\n });\n it('should allow the arbiter to approve', async () => {\n       await api.receive(arbiter.address);\n       let state = await contract.methods.state().call({ from: arbiter.address });\n       assert.equal(state, 2);\n });\n it('should allow the shipper to withdraw', async () => {\n       await api.withdraw(shipper.address);\n       let contractBalance = await web3.eth.getBalance(address);\n       assert.equal(0, contractBalance);\n });\n});",
    "referenceSolution": "const { bytecode, abi } = require('./AstronautContract.json');\n\nconst AstronautContract = new web3.eth.Contract(abi);\n\nclass AstronautAPI {\n  constructor(address) {\n    AstronautContract.options.address = address;\n    this.instance = AstronautContract;\n  }\n\n  pay(astronautAddress, value) {\n    return this.instance.methods.pay().send({\n      from: astronautAddress,\n      value: value\n    });\n  }\n\n  receive(arbiterAddress) {\n    return this.instance.methods.receive().send({\n      from: arbiterAddress\n    });\n  }\n\n  withdraw(shipperAddress) {\n    return this.instance.methods.withdraw().send({\n      from: shipperAddress\n    });\n  }\n}\n"
  }
}
